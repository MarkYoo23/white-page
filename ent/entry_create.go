// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"white-page/ent/entry"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntryCreate is the builder for creating a Entry entity.
type EntryCreate struct {
	config
	mutation *EntryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ec *EntryCreate) SetName(s string) *EntryCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ec *EntryCreate) SetNillableName(s *string) *EntryCreate {
	if s != nil {
		ec.SetName(*s)
	}
	return ec
}

// SetSurname sets the "surname" field.
func (ec *EntryCreate) SetSurname(s string) *EntryCreate {
	ec.mutation.SetSurname(s)
	return ec
}

// SetNillableSurname sets the "surname" field if the given value is not nil.
func (ec *EntryCreate) SetNillableSurname(s *string) *EntryCreate {
	if s != nil {
		ec.SetSurname(*s)
	}
	return ec
}

// SetTel sets the "tel" field.
func (ec *EntryCreate) SetTel(s string) *EntryCreate {
	ec.mutation.SetTel(s)
	return ec
}

// SetNillableTel sets the "tel" field if the given value is not nil.
func (ec *EntryCreate) SetNillableTel(s *string) *EntryCreate {
	if s != nil {
		ec.SetTel(*s)
	}
	return ec
}

// Mutation returns the EntryMutation object of the builder.
func (ec *EntryCreate) Mutation() *EntryMutation {
	return ec.mutation
}

// Save creates the Entry in the database.
func (ec *EntryCreate) Save(ctx context.Context) (*Entry, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EntryCreate) SaveX(ctx context.Context) *Entry {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EntryCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EntryCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EntryCreate) defaults() {
	if _, ok := ec.mutation.Name(); !ok {
		v := entry.DefaultName
		ec.mutation.SetName(v)
	}
	if _, ok := ec.mutation.Surname(); !ok {
		v := entry.DefaultSurname
		ec.mutation.SetSurname(v)
	}
	if _, ok := ec.mutation.Tel(); !ok {
		v := entry.DefaultTel
		ec.mutation.SetTel(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EntryCreate) check() error {
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Entry.name"`)}
	}
	if _, ok := ec.mutation.Surname(); !ok {
		return &ValidationError{Name: "surname", err: errors.New(`ent: missing required field "Entry.surname"`)}
	}
	if _, ok := ec.mutation.Tel(); !ok {
		return &ValidationError{Name: "tel", err: errors.New(`ent: missing required field "Entry.tel"`)}
	}
	return nil
}

func (ec *EntryCreate) sqlSave(ctx context.Context) (*Entry, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EntryCreate) createSpec() (*Entry, *sqlgraph.CreateSpec) {
	var (
		_node = &Entry{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(entry.Table, sqlgraph.NewFieldSpec(entry.FieldID, field.TypeInt))
	)
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(entry.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.Surname(); ok {
		_spec.SetField(entry.FieldSurname, field.TypeString, value)
		_node.Surname = value
	}
	if value, ok := ec.mutation.Tel(); ok {
		_spec.SetField(entry.FieldTel, field.TypeString, value)
		_node.Tel = value
	}
	return _node, _spec
}

// EntryCreateBulk is the builder for creating many Entry entities in bulk.
type EntryCreateBulk struct {
	config
	err      error
	builders []*EntryCreate
}

// Save creates the Entry entities in the database.
func (ecb *EntryCreateBulk) Save(ctx context.Context) ([]*Entry, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Entry, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EntryCreateBulk) SaveX(ctx context.Context) []*Entry {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EntryCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EntryCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
